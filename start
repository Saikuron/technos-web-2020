#!/bin/bash

if [[ ! -d ./logs ]]
then
	printf 'creating logs directory'
	mkdir logs
fi

# Deal the reset and init switches
reset=0
init=0
backTests=0
printHelp=0
while [ -n "$1" ]
do
	case "$1" in
		--reset) reset=1;;
		--init) init=1;;
		--back-test) backTests=1;;
		-h) printHelp=1;;
		--help) printHelp=1;;
		*) printf "$1 is not an option";;
	esac
	shift
done

if [ $printHelp -eq 1 ]
then
	printf "Usage : ./start [--init][--reset][--back-test][--help]\n\n"
	printf "Options:\n"
	printf "  --init \t\tUsed to init the database and fill it with some examples\n"
	printf "  --reset \t\tUsed to reset the database\n"
	printf "  --back-test \t\tUsed to launch the back-end tests\n"
	printf "  -h\n"
	printf "  --help \t\tUsed to print this help\n\n"
	printf "Notes\n"
	printf "  --init and --reset can be used together, the order isn't important as it will be treated as reset then init\n"
	printf "  Using --back-test with other options will not consider other options (except -h)\n"
	exit 0
fi

# Start dex
cd dex/
./bin/dex serve ../dex-config/config-private.yaml > ../logs/log-dex 2>&1 & # or err to ../logs/log-dex-err
cd ..
if [ $backTests -eq 1 ]
then 
	cd back-end/
	npm run test
	cd ..
else
	# Start back-end
	if [ $reset -eq 1 ]
	then
		bash ./back-end/bin/reset
	fi
	if [ $init -eq 1 ]
	then
		node ./back-end/bin/init
	fi
	node ./back-end/bin/start > logs/log-back 2>&1 & #Â or err to logs/log-back-err

	# Start front-end
	cd front-end/
	npm start 
fi

# kill back-end and dex when npm start is finished (i.e. ctrl-C)
#ps -ef | grep back-end/bin/start | grep -v grep | awk '{print $2}' | xargs kill
ps -ef | grep dex | grep -v grep | awk '{print $2}' | xargs kill

printf "Start script done"
